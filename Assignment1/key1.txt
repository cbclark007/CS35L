Homework: Learning to use Emacs

Exercise 1.1
I was experimenting a little bit for the first one.

2. C-n C-p C-e C-s H T M L Enter
3. C-s s c a v e n g e r Enter C-b C-b C-b C-b C-b C-b C-b C-b
4. C-n
5. C-s a r r o w Enter C-b C-b C-b C-b C-b
6. C-e
7. C-a
8. Using M-b instead of C-b many times would be a lot easier. It wasn't working at first, which is why I used C-b, but I changed an option in Terminal to use the option key as Meta, and then it worked for going back words.
9. I did not use the arrow keys.
10. C-x C-c


Exercise 1.2

2. C-n (18 times to get to 18th line) C-k
3. C-s D E L E T E Enter C-a C-k
4. C-s w i k i p e d i a Enter C-s w i k i p e d i a Enter C-a C-p C-k C-n C-k C-n C-k
5. C-s < ! - Enter C-b C-b C-space RArrow (7 times to select) Delete C-n C-a C-k C-n C-k C-n C-k C-n C-k C-s < ! - Enter C-a C-k

Exercise 1.3

2. C-s A s s i g n m e n t 1 Enter Backspace 4 2 C-s A s s i g n m e n t 1 Enter Backspace 4 2
3. C-p C-p C-p C-p C-p C-p C-p C-f C-f C-f Backspace Backspace Backspace Backspace Backspace U S - A S C I I
4. C-M-s [ ^ [ : a s c i i : ] ] Enter C-a C-k C-M-s [ ^ [ : a s c i i : ] ] Enter (to check if there were any more)
5. C-p (18 times to get to the first line) C-e Enter < / o l >

Exercise 1.4

3-4. C-v (12 times to scroll all the way down) C-n (18 times to get to the first deleted comment) C-f C-space DArrow LArrow LArrow M-w M-v (12 times to scroll back up) C-p (all the way to the top) C-s L a b o r a t o r y : Enter C-n C-n C-y 
C-v (13 times to scroll back down) M-v C-p (8 times) C-f C-space DArrow LArrow LArrow M-w C-r H o m e w o r k : L e a r n i n g Enter C-r H o m e w o r k : L e a r n i n g Enter C-n C-n C-y 
C-v (10 times to go back down) M-v C-p C-f C-space DArrow DArrow RArrow RArrow RArrow RArrow M-w C-r < h 2 > S u b m i t Enter C-r < h 2 > S u b m i t Enter C-n C-n C-y DArrow Backspace DArrow Backspace C-a C-f Backspace C-p C-f Backspace
C-v C-v C-v C-n (17 times to get to line with comment) M-f M-f M-f M-f C-space RArrow (7 times to highlight) M-w UArrow C-r < p > s h o u l d Enter M-f M-f M-f M-f C-y
C-v C-v C-n (7 times to get to next comment) C-f C-space DArrow DArrow DArrow RArrow RArrow RArrow M-w C-p C-p C-p C-p C-p C-r < p > s h o u l d Enter C-n C-y C-n C-n C-n Backspace Backspace Backspace C-a C-f Backspace C-p C-f Backspace C-p C-f Backspace
C-v C-v C-n (23 times to get to last line) C-f C-space DArrow LArrow LArrow M-w C-p C-p C-r < / h t m l > Enter C-n C-y

5. C-n C-a C-space [hold down arrow until select everything] Backspace

6. C-x u

7. - - > M-v M-v C-p Enter C-p < ! - - C-s < ! - - Enter C-e Backspace C-s < ! - - Enter C-e Backspace C-s < ! - - Enter C-n C-n C-e Backspace C-s < ! - - Enter C-f C-f C-f Backspace C-n C-n C-n C-n Backspace C-s < ! - - Enter C-e Backspace 

Essentially got rid of all the ">" for the comments in the middle.

8. C-r < o l > Enter
C-r < o l > Enter
C-r < o l > Enter
C-r < o l > Enter
C-r < o l > Enter
C-r < o l > Enter
C-r < o l > Enter

I found 7 instances of <ol>

M-% < o l > Enter < o L > Enter y y y y y y y

Exercise 1.5 
1. M-x m a k e - d i r e c t o r y Enter j u n k Enter
2. C-x C-f j u n k / h e l l o . c
3. M-x c o m p i l e Enter Backspace (to clear make -k) g c c Space ~ / j u n k / h e l l o . c Space - o Space h e l l o
4. C-x b h e l l o - o u t Enter C-u M-! ~ / j u n k / h e l l o Enter
5. EOF on input


Exercise 1.6
1. C-x b * s c r a t c h * Enter
2. m o s t - n e g a t i v e - f i x n u m C-j
-2305843009213693952
m o s t - p o s i t i v e - f i x n u m C-j
2305843009213693951

( f o r m a t Space " % x " Space m o s t - p o s i t i v e - f i x n u m ) C-j
"1fffffffffffffff"
( f o r m a t Space " % x " Space m o s t - n e g a t i v e - f i x n u m ) C-j
"2000000000000000"

These two integers are likely the maximum and minimum values that emacs can handle without overflow.

3. ( r a n d o m " 3 0 5 - 3 2 6 - 7 4 2 " ) C-j
-34807052350738012
4. ( s e t q Space x Space ( r a n d o m ) ) C-j
-436971118871970556
( s e t q Space y Space ( r a n d o m ) ) C-j
99717112696347680
5. ( s e t q Space p Space ( * Space x Space y ) ) C-j
p=220204040311017600
Since it's positive, I compute (logand p most-positive-fixnum)
( s e t q Space r Space ( l o g a n d Space p Space m o s t - p o s i t i v e - f i x n u m ) ) C-j
r=220204040311017600

r is the same as p after running the command.

6. r is not mathematically correct. x is negative and y is positive, so the product should be negative. However, r is positive.
7. x and y are not truly random because they have been seeded with my ID. The computer then uses the string that is seeded to generate a number. As such, the results can be reproduced if one uses the same seed and possibly some other factors. Numbers generated by computers are never truly random.
8. Assuming (random) is truly random:
The random function will select a single integer between -2305843009213693952 and 2305843009213693951 (since those are the most-negative-fixnum and most-positive-fixnum).

x*y must be <= 2305843009213693951 (on the positive end)
So, y <= 2305843009213693951/x
We see that this is the same as the area under the curve y=2305843009213693951/x
On the negative end, we get the area between the y-axis and y=-2305843009213693952/x

Integrating both and adding them together, we have:

integral (1 to 2305843009213693951) of (2305843009213693951/x) = 2305843009213693951 * lnx (1 to 2305843009213693951) = 2305843009213693951 * ln (2305843009213693951).

To make things simpler, I'll just multiply the above by two because it's symmetrical.

So the probability of x * y being < 2305843009213693951 or > -2305843009213693952 is:
2 * 2305843009213693951 * ln(2305843009213693951) = 1.9499121e+20

This is the total number of correct products there are. The total number of products possible is 2 * 2305843009213693951^2.

Dividing these two, we have the probability of a correct product, which is:
(2 * 2305843009213693951 * ln(2305843009213693951)) / (2 * 2305843009213693951^2) = 1.8336885 * 10^-17

Which is so small that it is basically 0.























